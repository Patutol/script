string = "fhdhb0-1()"
console.log(string)

function extractIPs(inputString) {
    // Регулярное выражение для поиска IP-адресов
    const ipPattern = /(\d{1,3}\.){3}\d{1,3}/g;

    // Найти все IP-адреса
    let ipMatches = inputString.match(ipPattern);
    
    if (!ipMatches) {
        return [];
    }
    
    let result = [];
    let segments = inputString.split('-');

    segments.forEach(segment => {
        let ipsInSegment = segment.match(ipPattern);
        
        if (ipsInSegment) {
            result.push(...ipsInSegment);
        }
    });

    return result.filter((ip, index) => result.indexOf(ip) === index);
}


stringArray = extractIPs(string);
string = string.replace(/\s/g, "")
stringArrayNew = [];

stringArray.forEach(i => {
    if(string[string.lastIndexOf(i)+i.length] == '-') stringArrayNew.push(i)
});

stringArrayResult = [];

stringArray.forEach(i => {
    if (stringArrayNew.includes(i)) {
        stringArrayResult.push(ipRange(i, stringArray[stringArray.indexOf(i)+1]));
    }
    else stringArrayResult.push(i)
})

console.log(stringArrayResult.flat());


function ipRange(start, end) {
    const startParts = start.split('.').map(Number);
    const endParts = end.split('.').map(Number);
    const result = [];

    for (let i = startParts[0]; i <= endParts[0]; i++) {
        for (let j = (i === startParts[0] ? startParts[1] : 0); j <= (i === endParts[0] ? endParts[1] : 255); j++) {
            for (let k = (i === startParts[0] && j === startParts[1] ? startParts[2] : 0); k <= (i === endParts[0] && j === endParts[1] ? endParts[2] : 255); k++) {
                for (let l = (i === startParts[0] && j === startParts[1] && k === startParts[2] ? startParts[3] : 0); l <= (i === endParts[0] && j === endParts[1] && k === endParts[2] ? endParts[3] : 255); l++) {
                    result.push(`${i}.${j}.${k}.${l}`);
                }
            }
        }
    }
    result.pop()
    return result;
}
